// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(uuid())
  name           String
  email          String    @unique
  password       String
  isAdmin        Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  artworks       Artwork[]
  collections    Collection[]
  orders         Order[]
}

model Artwork {
  id             String    @id @default(uuid())
  title          String
  description    String
  price          Float
  imageUrl       String
  model3dUrl     String?
  available      Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  userId         String
  user           User      @relation(fields: [userId], references: [id])
  collectionId   String?
  collection     Collection? @relation(fields: [collectionId], references: [id])
  orderItems     OrderItem[]
}

model Collection {
  id             String    @id @default(uuid())
  name           String
  description    String
  is3dGallery    Boolean   @default(false)
  galleryLayout  String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  userId         String
  user           User      @relation(fields: [userId], references: [id])
  artworks       Artwork[]
}

model Order {
  id             String    @id @default(uuid())
  totalAmount    Float
  status         String    @default("pending") // pending, paid, shipped, delivered
  paymentMethod  String    // stripe, bitcoin
  paymentId      String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  userId         String
  user           User      @relation(fields: [userId], references: [id])
  items          OrderItem[]
}

model OrderItem {
  id             String    @id @default(uuid())
  quantity       Int
  price          Float
  orderId        String
  order          Order     @relation(fields: [orderId], references: [id])
  artworkId      String
  artwork        Artwork   @relation(fields: [artworkId], references: [id])
}

model Session {
  id             String    @id @default(uuid())
  userId         String
  expires        DateTime
  sessionToken   String    @unique
  accessToken    String    @unique
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
} 